# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

enum ReservationsStatusEnum {
  OPEN
  ACTIVE
  CLOSED
}

# type Reservations @model @auth(rules: [{allow: public}]) {
# id: ID!
# customersID: ID! @index(name: "byCustomers")
#  pickup_date: AWSDate
#  return_date: AWSDate
#  pickup_location: String
#  status: ReservationsStatusEnum
#  ReservationCars: Cars @hasOne
#  ReservationPrices: Prices @hasOne
#}

type Reservations @model @auth(rules: [{allow: public}]) {
  id: ID!
  customersID: ID! @index(name: "byCustomers")
  pickup_date: AWSDate
  return_date: AWSDate
  pickup_location: String
  status: String
  car: String
  price: Float
  deposit: Float
}

type Candidate @model @auth(rules: [{allow: public, operations: [create, update]}]) {
  id: ID!
  name: String!
  email: AWSEmail!
}

type ToDo @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  description: String
}

type Fees @model @auth(rules: [{allow: public}]) {
  id: ID!
  deposit: Float
  carsID: ID! @index(name: "byCars")
}

type Prices @model @auth(rules: [{allow: public}]) {
  id: ID!
  rate_1: Float
  rate_3: Float
  rate_6: Float
  rate_12: Float
  rate_18: Float
  rate_24: Float
  carsID: ID! @index(name: "byCars")
}

type InsurancePackages @model @auth(rules: [{allow: public}]) {
  id: ID!
  description: String
  carsID: ID! @index(name: "byCars")
}

type KMPackages @model @auth(rules: [{allow: public}]) {
  id: ID!
  description: Int
  carsID: ID! @index(name: "byCars")
}

type Classes @model @auth(rules: [{allow: public}]) {
  id: ID!
  description: String
  suppliersID: ID! @index(name: "bySuppliers")
}

type Suppliers @model @auth(rules: [{allow: public}]) {
  id: ID!
  description: String
  SuppliersClasses: [Classes] @hasMany(indexName: "bySuppliers", fields: ["id"])
}

enum FuelEnum {
  PETROL
  DIESEL
}

enum TransmissionEnum {
  MANUAL
  AUTO
}

type Cars @model @auth(rules: [{allow: public}]) {
  id: ID!
  Make: String
  Model: String
  Variant: String
  Year: String
  Transmission: TransmissionEnum
  Fuel: FuelEnum
  Seats: Int
  CarsKMPackages: [KMPackages] @hasMany(indexName: "byCars", fields: ["id"])
  CarsInsurancePackages: [InsurancePackages] @hasMany(indexName: "byCars", fields: ["id"])
  CarsClasses: Classes @hasOne
  CarsPrices: [Prices] @hasMany(indexName: "byCars", fields: ["id"])
  CarsFees: [Fees] @hasMany(indexName: "byCars", fields: ["id"])
}

enum DocumentTypeEnum {
  SA_ID
  PASSPORT
  DRIVERS_LICENCE
  PROOF_OF_ADDRESS
  BANK_STATEMENTS
}

type Documents @model @auth(rules: [{allow: public}]) {
  id: ID!
  file_name: String
  document_type: DocumentTypeEnum
  customersID: ID! @index(name: "byCustomers")
}

enum ProvincesEnum {
  EASTERN_CAPE
  FREESTATE
  GAUTENG
  KWAZULU_NATAL
  LIMPOPO
  MPUMALANGA
  NORTHERN_CAPE
  NORTH_WEST
  WESTERN_CAPE
}

type Addresses @model @auth(rules: [{allow: public}]) {
  id: ID!
  street1: String
  street2: String
  city: String
  suburb: String
  province: ProvincesEnum
}

enum StatusEnum {
  APPROVED
  DECLINED
}

type Customers @model @auth(rules: [{allow: public}]) {
  id: ID!
  first_name: String
  last_name: String
  email: AWSEmail
  phone: Int
  id_number: String
  drivers_licence: String
  CustomersDocuments: [Documents] @hasMany(indexName: "byCustomers", fields: ["id"])
  CustomersAddresses: Addresses @hasOne
  salary: Float
  status: StatusEnum
  comments: String
  CustomerReservations: [Reservations] @hasMany(indexName: "byCustomers", fields: ["id"])
}